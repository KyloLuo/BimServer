<%@ jet package="org.bimserver.tools.generators" imports="org.eclipse.emf.ecore.* org.bimserver.utils.* java.io.File" class="SServiceGenerator" %>
package org.bimserver.interfaces;

<%
/******************************************************************************
 * Copyright (C) 2009-2012  BIMserver.org
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/
%>

import org.bimserver.shared.meta.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.bimserver.shared.interfaces.PublicInterface;

<%=Licenser.getCommentedLicenseText(new File("license.txt"))%>

<%
Object[] args = (Object[])argument;
Class<?> cl = (Class<?>)args[0];
EPackage ePackage = (EPackage)args[1];
%>

public class S<%=cl.getSimpleName()%>Service extends org.bimserver.shared.meta.SService {
	private static final Logger LOGGER = LoggerFactory.getLogger(S<%=cl.getSimpleName()%>Service.class);

	public S<%=cl.getSimpleName()%>Service(SServicesMap servicesMap, SourceCodeFetcher sourceCodeFetcher, Class<? extends PublicInterface> cl) {
		super(servicesMap, sourceCodeFetcher, cl);
	}
	
		public void init() {
			try {
<%
		for (EClassifier eClassifier : ePackage.getEClassifiers()) {
			if (eClassifier instanceof EClass) {
%>
				getServicesMap().addType(new SClass(getServicesMap(), Class.forName("org.bimserver.interfaces.objects.S<%=eClassifier.getName()%>"), new SConstructor(){
					public Object newInstance() {
						return new org.bimserver.interfaces.objects.S<%=eClassifier.getName()%>();
					}
				}));
<%
			} else if (eClassifier instanceof EEnum) {
%>
				getServicesMap().addType(new SClass(getServicesMap(), Class.forName("org.bimserver.interfaces.objects.S<%=eClassifier.getName()%>"), null));
<%
			}
		}
%>
			super.init();
		} catch (ClassNotFoundException e) {
			LOGGER.error("", e);
		}
	}
}