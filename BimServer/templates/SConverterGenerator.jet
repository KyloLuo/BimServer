<%@ jet package="org.bimserver.tools.generators" imports="org.eclipse.emf.ecore.* org.bimserver.utils.* org.bimserver.emf.MetaDataManager java.io.File java.util.Set org.bimserver.utils.StringUtils" class="SConverterGenerator" %>
package org.bimserver.interfaces;
<%
/******************************************************************************
 * Copyright (C) 2009-2012  BIMserver.org
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *****************************************************************************/
%>

<%=Licenser.getCommentedLicenseText(new File("license.txt"))%>

import org.bimserver.emf.IdEObjectImpl;
import org.bimserver.interfaces.objects.*;
import java.util.*;
import org.bimserver.models.log.*;
import org.bimserver.models.store.*;
import org.bimserver.database.DatabaseSession;
import org.bimserver.database.BimserverDatabaseException;
import org.bimserver.database.Query;

public class SConverter {
<%
	try {
	Object[] argumentsArray = (Object[])argument;
	MetaDataManager metaDataManager = (MetaDataManager)argumentsArray[0];
	@SuppressWarnings("unchecked") Set<EPackage> ePackages = (Set<EPackage>)argumentsArray[1];
	for (EPackage ePackage : ePackages) {
		for (EClassifier eClassifier : ePackage.getEClassifiers()) {
			if (eClassifier instanceof EClass) {
				EClass eClass = (EClass)eClassifier;
%>

	public Set<S<%=eClass.getName()%>> convertToSSet<%=eClass.getName()%>(Collection<<%=eClass.getName()%>> input) {
		Set<S<%=eClass.getName()%>> result = new HashSet<S<%=eClass.getName()%>>();
		for (<%=eClass.getName()%> o : input) {
			result.add(convertToSObject(o));
		}
		return result;
	}

	public Set<<%=eClass.getName()%>> convertFromSSet<%=eClass.getName()%>(Collection<S<%=eClass.getName()%>> input, DatabaseSession session) throws BimserverDatabaseException {
		Set<<%=eClass.getName()%>> result = new HashSet<<%=eClass.getName()%>>();
		for (S<%=eClass.getName()%> o : input) {
			result.add(convertFromSObject(o, session));
		}
		return result;
	}

	public List<S<%=eClass.getName()%>> convertToSList<%=eClass.getName()%>(Collection<<%=eClass.getName()%>> input) {
		List<S<%=eClass.getName()%>> result = new ArrayList<S<%=eClass.getName()%>>();
		for (<%=eClass.getName()%> o : input) {
			result.add(convertToSObject(o));
		}
		return result;
	}

	public List<<%=eClass.getName()%>> convertFromSList<%=eClass.getName()%>(Collection<S<%=eClass.getName()%>> input, DatabaseSession session) throws BimserverDatabaseException {
		List<<%=eClass.getName()%>> result = new ArrayList<<%=eClass.getName()%>>();
		for (S<%=eClass.getName()%> o : input) {
			result.add(convertFromSObject(o, session));
		}
		return result;
	}

	public S<%=eClass.getName()%> convertToSObject(<%=eClass.getName()%> input) {
		if (input == null) {
			return null;
		}
		<% if (!metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).isEmpty()) {
	for (EClass subClass : metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass)) {
%>
		<%=metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).iterator().next() == subClass ? "" : "else "%>if (input instanceof <%=subClass.getName()%>) {
			return convertToSObject((<%=subClass.getName()%>)input);
		}
<%
		}
	}
%>
		S<%=eClass.getName()%> result = new S<%=eClass.getName()%>();
<% if (eClass.getEAnnotation("nodatabase") == null) {%>
		result.setOid(input.getOid());
		result.setRid(input.getRid());
<% } %>
<%
	for (EAttribute eAttribute : eClass.getEAllAttributes()) {
		if (eAttribute.getEType() instanceof EEnum) {
%>
		result.set<%=StringUtils.firstUpperCase(eAttribute.getName())%>(S<%=eAttribute.getEType().getName()%>.values()[input.get<%=StringUtils.firstUpperCase(eAttribute.getName())%>().ordinal()]);
<%
		} else {
			if (eAttribute.isMany()) {
%>
		result.get<%=StringUtils.firstUpperCase(eAttribute.getName())%>().addAll(input.<%=eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? "is" : "get"%><%=StringUtils.firstUpperCase(eAttribute.getName())%>());
<%
			} else {
%>
		result.set<%=StringUtils.firstUpperCase(eAttribute.getName())%>(input.<%=eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? "is" : "get"%><%=StringUtils.firstUpperCase(eAttribute.getName())%>());
<%
			}
		}
	}
	for (EReference eReference : eClass.getEAllReferences()) {
		if (eReference.isMany()) {
			if (eReference.getEAnnotation("embedsreference") != null) {
%>
		List<S<%=eReference.getEType().getName()%>> list<%=eReference.getName()%> = new ArrayList<S<%=eReference.getEType().getName()%>>();
		for (<%=eReference.getEType().getName()%> v : input.get<%=StringUtils.firstUpperCase(eReference.getName())%>()) {
			list<%=eReference.getName()%>.add(convertToSObject(v));
		}
		result.set<%=StringUtils.firstUpperCase(eReference.getName())%>(list<%=eReference.getName()%>);
<%
			} else {
%>
		List<Long> list<%=eReference.getName()%> = new ArrayList<Long>();
		for (<%=eReference.getEType().getName()%> v : input.get<%=StringUtils.firstUpperCase(eReference.getName())%>()) {
			list<%=eReference.getName()%>.add(v.getOid());
		}
		result.set<%=StringUtils.firstUpperCase(eReference.getName())%>(list<%=eReference.getName()%>);
<%
			}
		} else {
			if (eReference.getEAnnotation("embedsreference") != null) {
%>
		<%=eReference.getEType().getName()%> <%=eReference.getName()%>Val = input.get<%=StringUtils.firstUpperCase(eReference.getName())%>();
		result.set<%=StringUtils.firstUpperCase(eReference.getName())%>(convertToSObject(<%=eReference.getName()%>Val));
<%
			} else {
%>
		<%=eReference.getEType().getName()%> <%=eReference.getName()%>Val = input.get<%=StringUtils.firstUpperCase(eReference.getName())%>();
		result.set<%=StringUtils.firstUpperCase(eReference.getName())%>Id(<%=eReference.getName()%>Val == null ? -1 : <%=eReference.getName()%>Val.getOid());
<%
			}
		}
	}
%>
		return result;
	}
	public <%=eClass.getName()%> convertFromSObject(S<%=eClass.getName()%> input, DatabaseSession session) throws BimserverDatabaseException {
		<%=eClass.getName()%> result = convertFromSObject(input, <%=StringUtils.firstUpperCase(eClass.getEPackage().getName())%>Factory.eINSTANCE.create<%=eClass.getName()%>(), session);
		<% if (eClass.getEAnnotation("nodatabase") == null) { %>
		((IdEObjectImpl)result).setOid(input.getOid());
		((IdEObjectImpl)result).setRid(input.getRid());
		<% } %>
		return result;
	}

	public <%=eClass.getName()%> convertFromSObject(S<%=eClass.getName()%> input, <%=eClass.getName()%> result, DatabaseSession session) throws BimserverDatabaseException {
		if (input == null) {
			return null;
		}
<%
	if (!metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).isEmpty()) {
		for (EClass subClass : metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass)) {
%>
		<%=metaDataManager.getPackageMetaData(ePackage.getName()).getDirectSubClasses(eClass).iterator().next() == subClass ? "" : "else "%>if (input instanceof S<%=subClass.getName()%>) {
			return convertFromSObject((S<%=subClass.getName()%>)input, session);
		}
<%
		}
		}
	for (EAttribute eAttribute : eClass.getEAllAttributes()) {
		if (eAttribute.getEType() instanceof EEnum) {
%>
		result.set<%=StringUtils.firstUpperCase(eAttribute.getName())%>(<%=eAttribute.getEType().getName()%>.values()[input.get<%=StringUtils.firstUpperCase(eAttribute.getName())%>().ordinal()]);
<%
		} else {
			if (eAttribute.isMany()) {
%>
		result.get<%=StringUtils.firstUpperCase(eAttribute.getName())%>().addAll(input.<%=eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? "is" : "get"%><%=StringUtils.firstUpperCase(eAttribute.getName())%>());
<%
			} else {
%>
		result.set<%=StringUtils.firstUpperCase(eAttribute.getName())%>(input.<%=eAttribute.getEType() == EcorePackage.eINSTANCE.getEBoolean() ? "is" : "get"%><%=StringUtils.firstUpperCase(eAttribute.getName())%>());
<%
			}
		}
	}
	for (EReference eReference : eClass.getEAllReferences()) {
		if (eReference.isMany()) {
			if (eReference.getEAnnotation("embedsreference") != null) {
%>
		List<<%=eReference.getEType().getName()%>> list<%=eReference.getName()%> = result.get<%=StringUtils.firstUpperCase(eReference.getName())%>();
		for (S<%=eReference.getEType().getName()%> v : input.get<%=StringUtils.firstUpperCase(eReference.getName())%>()) {
			list<%=eReference.getName()%>.add(convertFromSObject(v, session));
		}
<%
			} else {
%>
		List<<%=eReference.getEType().getName()%>> list<%=eReference.getName()%> = result.get<%=StringUtils.firstUpperCase(eReference.getName())%>();
		for (long oid : input.get<%=StringUtils.firstUpperCase(eReference.getName())%>()) {
			list<%=eReference.getName()%>.add((<%=eReference.getEType().getName()%>)session.get(<%=StringUtils.firstUpperCase(eReference.getEType().getEPackage().getName())%>Package.eINSTANCE.get<%=eReference.getEType().getName()%>(), oid, Query.getDefault()));
		}
<%		
			}
		} else {
			if (eReference.getEAnnotation("embedsreference") != null) {
%>
		result.set<%=StringUtils.firstUpperCase(eReference.getName())%>(convertFromSObject(input.get<%=StringUtils.firstUpperCase(eReference.getName())%>(), session));
<%
			} else {
%>
		result.set<%=StringUtils.firstUpperCase(eReference.getName())%>((<%=eReference.getEType().getName()%>)session.get(<%=StringUtils.firstUpperCase(eReference.getEType().getEPackage().getName())%>Package.eINSTANCE.get<%=eReference.getEType().getName()%>(), input.get<%=StringUtils.firstUpperCase(eReference.getName())%>Id(), Query.getDefault()));
<%
			}
		}
	}
%>
		return result;
	}
<%
		} else if (eClassifier instanceof EEnum) {
			EEnum eEnum = (EEnum)eClassifier;
%>
		public S<%=eEnum.getName()%> convertToSObject(<%=eEnum.getName()%> input) {
			return S<%=eEnum.getName()%>.values()[input.ordinal()];
		}
		
		public <%=eEnum.getName()%> convertFromSObject(S<%=eEnum.getName()%> input) {
			return <%=eEnum.getName()%>.values()[input.ordinal()];
		}
<%
		}
	}
}
} catch (Exception e) {
	e.printStackTrace();
}
%>
}